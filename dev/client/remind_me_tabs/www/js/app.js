angular.module('RemindMe', ['ionic', 'RemindMe.controllers', 'RemindMe.services', 'RemindMe.directives'])

.run(function($ionicPlatform, $state, LoginData) {

  //maybe have logindata recover data and broadcast ready

  $ionicPlatform.ready(function() {
    // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard
    // for form inputs)
    //check if user data is cached

    if (window.cordova && window.cordova.plugins.Keyboard) {
      cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
    }
    if (window.StatusBar) {
      // org.apache.cordova.statusbar required
      StatusBar.styleDefault();
    }
  });
})

.config(function($stateProvider, $urlRouterProvider, $provide) {
  $provide.decorator('$state', function($delegate, $stateParams) {
        $delegate.forceReload = function() {
            return $delegate.go($delegate.current, $stateParams, {
                reload: true,
                inherit: false,
                notify: true
            });
        };
        return $delegate;
  });
  // Ionic uses AngularUI Router which uses the concept of states
  // Learn more here: https://github.com/angular-ui/ui-router
  // Set up the various states which the app can be in.
  // Each state's controller can be found in controllers.js
  $stateProvider

    .state('login', {
      url: '/login',
      templateUrl: 'templates/login.html',
      controller: 'LoginCtrl'
    })

    .state('signup', {
      url: '/signup',
      templateUrl: 'templates/signup.html',
      controller: 'SignupCtrl'
    })
  // setup an abstract state for the tabs directive
    .state('tab', {
    url: "/tab",
    abstract: true,
    resolve: {
      //returns query promise
      User: function(UserDoc){//inject service
        return UserDoc.get().$promise;
      },
      todos: function(User){
          todos = User.todos;
      }
    },
    templateUrl: "templates/tabs.html"
  })

  // Each tab has its own nav history stack:

  .state('tab.todos', {
    url: '/todos',
    views: {
      'tab-todos':{
        templateUrl: 'templates/tab-todos.html',
        controller: 'TodosCtrl'
      }
    }
  })

  .state('tab.newtodo', {
    url: '/todos/newtodo',
    views: {
      'tab-todos':{
        templateUrl: 'templates/new-todo.html',
        controller: 'NewTodoCtrl'
      }
    }
  })

  .state('tab.todo-detail', {
    url: '/todos/:created',
    resolve: {
      //because im using id generated by the server, new todos cant be clicked
      todo: function(User, $stateParams){
          for (var i = 0; i < User.todos.length; i++) {
            if (User.todos[i].created == $stateParams.created) {
              todo = User.todos[i];
            }
          }
        }
    },
    views: {
      'tab-todos': {
        templateUrl: 'templates/todo-detail.html',
        controller: 'TodoDetailCtrl'
      }
    }
  })

  .state('tab.location', {
      url: '/locations',
      views: {
        'tab-locations': {
          templateUrl: 'templates/tab-locations.html',
          controller: 'LocationsCtrl'
        }
      }
    })

  .state('tab.account', {
    url: '/account',
    views: {
      'tab-account': {
        templateUrl: 'templates/tab-account.html',
        controller: 'AccountCtrl'
      }
    }
  });

  // if none of the above states are matched, use this as the fallback
  $urlRouterProvider.otherwise('/login');
});
